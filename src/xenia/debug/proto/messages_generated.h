// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_MESSAGES_XE_DEBUG_PROTO_H_
#define FLATBUFFERS_GENERATED_MESSAGES_XE_DEBUG_PROTO_H_

#include "flatbuffers/flatbuffers.h"

namespace xe {
namespace debug {
namespace proto {
struct XObject;
}  // namespace proto
}  // namespace debug
}  // namespace xe
namespace xe {
namespace debug {
namespace proto {
struct Breakpoint;
struct ListBreakpointsRequest;
struct ListBreakpointsResponse;
struct AddBreakpointsRequest;
struct AddBreakpointsResponse;
struct UpdateBreakpointsRequest;
struct UpdateBreakpointsResponse;
struct RemoveBreakpointsRequest;
struct RemoveBreakpointsResponse;
}  // namespace proto
}  // namespace debug
}  // namespace xe
namespace xe {
namespace debug {
namespace proto {
struct StopRequest;
struct StopResponse;
struct BreakRequest;
struct BreakResponse;
struct ContinueRequest;
struct ContinueResponse;
struct StepRequest;
struct StepResponse;
struct BreakpointEvent;
struct AccessViolationEvent;
}  // namespace proto
}  // namespace debug
}  // namespace xe
namespace xe {
namespace debug {
namespace proto {
struct Module;
struct ListModulesRequest;
struct ListModulesResponse;
struct GetModuleRequest;
struct GetModuleResponse;
}  // namespace proto
}  // namespace debug
}  // namespace xe
namespace xe {
namespace debug {
namespace proto {
struct Thread;
struct ListThreadsRequest;
struct ListThreadsResponse;
}  // namespace proto
}  // namespace debug
}  // namespace xe

namespace xe {
namespace debug {
namespace proto {

struct AttachRequest;
struct AttachResponse;
struct Request;
struct Response;

enum RequestData {
  RequestData_NONE = 0,
  RequestData_AttachRequest = 1,
  RequestData_ListBreakpointsRequest = 2,
  RequestData_AddBreakpointsRequest = 3,
  RequestData_UpdateBreakpointsRequest = 4,
  RequestData_RemoveBreakpointsRequest = 5,
  RequestData_ListModulesRequest = 6,
  RequestData_GetModuleRequest = 7,
  RequestData_StopRequest = 8,
  RequestData_BreakRequest = 9,
  RequestData_ContinueRequest = 10,
  RequestData_StepRequest = 11
};

inline const char **EnumNamesRequestData() {
  static const char *names[] = { "NONE", "AttachRequest", "ListBreakpointsRequest", "AddBreakpointsRequest", "UpdateBreakpointsRequest", "RemoveBreakpointsRequest", "ListModulesRequest", "GetModuleRequest", "StopRequest", "BreakRequest", "ContinueRequest", "StepRequest", nullptr };
  return names;
}

inline const char *EnumNameRequestData(RequestData e) { return EnumNamesRequestData()[e]; }

inline bool VerifyRequestData(flatbuffers::Verifier &verifier, const void *union_obj, RequestData type);

enum ResponseData {
  ResponseData_NONE = 0,
  ResponseData_AttachResponse = 1,
  ResponseData_ListBreakpointsResponse = 2,
  ResponseData_AddBreakpointsResponse = 3,
  ResponseData_UpdateBreakpointsResponse = 4,
  ResponseData_RemoveBreakpointsResponse = 5,
  ResponseData_ListModulesResponse = 6,
  ResponseData_GetModuleResponse = 7,
  ResponseData_StopResponse = 8,
  ResponseData_BreakResponse = 9,
  ResponseData_ContinueResponse = 10,
  ResponseData_StepResponse = 11,
  ResponseData_BreakpointEvent = 12,
  ResponseData_AccessViolationEvent = 13
};

inline const char **EnumNamesResponseData() {
  static const char *names[] = { "NONE", "AttachResponse", "ListBreakpointsResponse", "AddBreakpointsResponse", "UpdateBreakpointsResponse", "RemoveBreakpointsResponse", "ListModulesResponse", "GetModuleResponse", "StopResponse", "BreakResponse", "ContinueResponse", "StepResponse", "BreakpointEvent", "AccessViolationEvent", nullptr };
  return names;
}

inline const char *EnumNameResponseData(ResponseData e) { return EnumNamesResponseData()[e]; }

inline bool VerifyResponseData(flatbuffers::Verifier &verifier, const void *union_obj, ResponseData type);

struct AttachRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct AttachRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  AttachRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  AttachRequestBuilder &operator=(const AttachRequestBuilder &);
  flatbuffers::Offset<AttachRequest> Finish() {
    auto o = flatbuffers::Offset<AttachRequest>(fbb_.EndTable(start_, 0));
    return o;
  }
};

inline flatbuffers::Offset<AttachRequest> CreateAttachRequest(flatbuffers::FlatBufferBuilder &_fbb) {
  AttachRequestBuilder builder_(_fbb);
  return builder_.Finish();
}

struct AttachResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::String *memory_file() const { return GetPointer<const flatbuffers::String *>(4); }
  const flatbuffers::String *functions_file() const { return GetPointer<const flatbuffers::String *>(6); }
  const flatbuffers::String *functions_trace_file() const { return GetPointer<const flatbuffers::String *>(8); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* memory_file */) &&
           verifier.Verify(memory_file()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* functions_file */) &&
           verifier.Verify(functions_file()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* functions_trace_file */) &&
           verifier.Verify(functions_trace_file()) &&
           verifier.EndTable();
  }
};

struct AttachResponseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_memory_file(flatbuffers::Offset<flatbuffers::String> memory_file) { fbb_.AddOffset(4, memory_file); }
  void add_functions_file(flatbuffers::Offset<flatbuffers::String> functions_file) { fbb_.AddOffset(6, functions_file); }
  void add_functions_trace_file(flatbuffers::Offset<flatbuffers::String> functions_trace_file) { fbb_.AddOffset(8, functions_trace_file); }
  AttachResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  AttachResponseBuilder &operator=(const AttachResponseBuilder &);
  flatbuffers::Offset<AttachResponse> Finish() {
    auto o = flatbuffers::Offset<AttachResponse>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<AttachResponse> CreateAttachResponse(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> memory_file = 0,
   flatbuffers::Offset<flatbuffers::String> functions_file = 0,
   flatbuffers::Offset<flatbuffers::String> functions_trace_file = 0) {
  AttachResponseBuilder builder_(_fbb);
  builder_.add_functions_trace_file(functions_trace_file);
  builder_.add_functions_file(functions_file);
  builder_.add_memory_file(memory_file);
  return builder_.Finish();
}

struct Request FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint32_t id() const { return GetField<uint32_t>(4, 0); }
  RequestData request_data_type() const { return static_cast<RequestData>(GetField<uint8_t>(6, 0)); }
  const void *request_data() const { return GetPointer<const void *>(8); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, 4 /* id */) &&
           VerifyField<uint8_t>(verifier, 6 /* request_data_type */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* request_data */) &&
           VerifyRequestData(verifier, request_data(), request_data_type()) &&
           verifier.EndTable();
  }
};

struct RequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint32_t id) { fbb_.AddElement<uint32_t>(4, id, 0); }
  void add_request_data_type(RequestData request_data_type) { fbb_.AddElement<uint8_t>(6, static_cast<uint8_t>(request_data_type), 0); }
  void add_request_data(flatbuffers::Offset<void> request_data) { fbb_.AddOffset(8, request_data); }
  RequestBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  RequestBuilder &operator=(const RequestBuilder &);
  flatbuffers::Offset<Request> Finish() {
    auto o = flatbuffers::Offset<Request>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<Request> CreateRequest(flatbuffers::FlatBufferBuilder &_fbb,
   uint32_t id = 0,
   RequestData request_data_type = RequestData_NONE,
   flatbuffers::Offset<void> request_data = 0) {
  RequestBuilder builder_(_fbb);
  builder_.add_request_data(request_data);
  builder_.add_id(id);
  builder_.add_request_data_type(request_data_type);
  return builder_.Finish();
}

struct Response FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint32_t id() const { return GetField<uint32_t>(4, 0); }
  ResponseData response_data_type() const { return static_cast<ResponseData>(GetField<uint8_t>(6, 0)); }
  const void *response_data() const { return GetPointer<const void *>(8); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, 4 /* id */) &&
           VerifyField<uint8_t>(verifier, 6 /* response_data_type */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* response_data */) &&
           VerifyResponseData(verifier, response_data(), response_data_type()) &&
           verifier.EndTable();
  }
};

struct ResponseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint32_t id) { fbb_.AddElement<uint32_t>(4, id, 0); }
  void add_response_data_type(ResponseData response_data_type) { fbb_.AddElement<uint8_t>(6, static_cast<uint8_t>(response_data_type), 0); }
  void add_response_data(flatbuffers::Offset<void> response_data) { fbb_.AddOffset(8, response_data); }
  ResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ResponseBuilder &operator=(const ResponseBuilder &);
  flatbuffers::Offset<Response> Finish() {
    auto o = flatbuffers::Offset<Response>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<Response> CreateResponse(flatbuffers::FlatBufferBuilder &_fbb,
   uint32_t id = 0,
   ResponseData response_data_type = ResponseData_NONE,
   flatbuffers::Offset<void> response_data = 0) {
  ResponseBuilder builder_(_fbb);
  builder_.add_response_data(response_data);
  builder_.add_id(id);
  builder_.add_response_data_type(response_data_type);
  return builder_.Finish();
}

inline bool VerifyRequestData(flatbuffers::Verifier &verifier, const void *union_obj, RequestData type) {
  switch (type) {
    case RequestData_NONE: return true;
    case RequestData_AttachRequest: return verifier.VerifyTable(reinterpret_cast<const AttachRequest *>(union_obj));
    case RequestData_ListBreakpointsRequest: return verifier.VerifyTable(reinterpret_cast<const xe::debug::proto::ListBreakpointsRequest *>(union_obj));
    case RequestData_AddBreakpointsRequest: return verifier.VerifyTable(reinterpret_cast<const xe::debug::proto::AddBreakpointsRequest *>(union_obj));
    case RequestData_UpdateBreakpointsRequest: return verifier.VerifyTable(reinterpret_cast<const xe::debug::proto::UpdateBreakpointsRequest *>(union_obj));
    case RequestData_RemoveBreakpointsRequest: return verifier.VerifyTable(reinterpret_cast<const xe::debug::proto::RemoveBreakpointsRequest *>(union_obj));
    case RequestData_ListModulesRequest: return verifier.VerifyTable(reinterpret_cast<const xe::debug::proto::ListModulesRequest *>(union_obj));
    case RequestData_GetModuleRequest: return verifier.VerifyTable(reinterpret_cast<const xe::debug::proto::GetModuleRequest *>(union_obj));
    case RequestData_StopRequest: return verifier.VerifyTable(reinterpret_cast<const xe::debug::proto::StopRequest *>(union_obj));
    case RequestData_BreakRequest: return verifier.VerifyTable(reinterpret_cast<const xe::debug::proto::BreakRequest *>(union_obj));
    case RequestData_ContinueRequest: return verifier.VerifyTable(reinterpret_cast<const xe::debug::proto::ContinueRequest *>(union_obj));
    case RequestData_StepRequest: return verifier.VerifyTable(reinterpret_cast<const xe::debug::proto::StepRequest *>(union_obj));
    default: return false;
  }
}

inline bool VerifyResponseData(flatbuffers::Verifier &verifier, const void *union_obj, ResponseData type) {
  switch (type) {
    case ResponseData_NONE: return true;
    case ResponseData_AttachResponse: return verifier.VerifyTable(reinterpret_cast<const AttachResponse *>(union_obj));
    case ResponseData_ListBreakpointsResponse: return verifier.VerifyTable(reinterpret_cast<const xe::debug::proto::ListBreakpointsResponse *>(union_obj));
    case ResponseData_AddBreakpointsResponse: return verifier.VerifyTable(reinterpret_cast<const xe::debug::proto::AddBreakpointsResponse *>(union_obj));
    case ResponseData_UpdateBreakpointsResponse: return verifier.VerifyTable(reinterpret_cast<const xe::debug::proto::UpdateBreakpointsResponse *>(union_obj));
    case ResponseData_RemoveBreakpointsResponse: return verifier.VerifyTable(reinterpret_cast<const xe::debug::proto::RemoveBreakpointsResponse *>(union_obj));
    case ResponseData_ListModulesResponse: return verifier.VerifyTable(reinterpret_cast<const xe::debug::proto::ListModulesResponse *>(union_obj));
    case ResponseData_GetModuleResponse: return verifier.VerifyTable(reinterpret_cast<const xe::debug::proto::GetModuleResponse *>(union_obj));
    case ResponseData_StopResponse: return verifier.VerifyTable(reinterpret_cast<const xe::debug::proto::StopResponse *>(union_obj));
    case ResponseData_BreakResponse: return verifier.VerifyTable(reinterpret_cast<const xe::debug::proto::BreakResponse *>(union_obj));
    case ResponseData_ContinueResponse: return verifier.VerifyTable(reinterpret_cast<const xe::debug::proto::ContinueResponse *>(union_obj));
    case ResponseData_StepResponse: return verifier.VerifyTable(reinterpret_cast<const xe::debug::proto::StepResponse *>(union_obj));
    case ResponseData_BreakpointEvent: return verifier.VerifyTable(reinterpret_cast<const xe::debug::proto::BreakpointEvent *>(union_obj));
    case ResponseData_AccessViolationEvent: return verifier.VerifyTable(reinterpret_cast<const xe::debug::proto::AccessViolationEvent *>(union_obj));
    default: return false;
  }
}

}  // namespace proto
}  // namespace debug
}  // namespace xe

#endif  // FLATBUFFERS_GENERATED_MESSAGES_XE_DEBUG_PROTO_H_
