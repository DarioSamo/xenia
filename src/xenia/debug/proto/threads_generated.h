// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_THREADS_XE_DEBUG_PROTO_H_
#define FLATBUFFERS_GENERATED_THREADS_XE_DEBUG_PROTO_H_

#include "flatbuffers/flatbuffers.h"

namespace xe {
namespace debug {
namespace proto {
struct XObject;
}  // namespace proto
}  // namespace debug
}  // namespace xe

namespace xe {
namespace debug {
namespace proto {

struct Thread;
struct ListThreadsRequest;
struct ListThreadsResponse;

enum ThreadType {
  ThreadType_Kernel = 0,
  ThreadType_User = 1
};

inline const char **EnumNamesThreadType() {
  static const char *names[] = { "Kernel", "User", nullptr };
  return names;
}

inline const char *EnumNameThreadType(ThreadType e) { return EnumNamesThreadType()[e]; }

struct Thread FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const xe::debug::proto::XObject *object() const { return GetStruct<const xe::debug::proto::XObject *>(4); }
  ThreadType type() const { return static_cast<ThreadType>(GetField<int8_t>(6, 0)); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<xe::debug::proto::XObject>(verifier, 4 /* object */) &&
           VerifyField<int8_t>(verifier, 6 /* type */) &&
           verifier.EndTable();
  }
};

struct ThreadBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_object(const xe::debug::proto::XObject *object) { fbb_.AddStruct(4, object); }
  void add_type(ThreadType type) { fbb_.AddElement<int8_t>(6, static_cast<int8_t>(type), 0); }
  ThreadBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ThreadBuilder &operator=(const ThreadBuilder &);
  flatbuffers::Offset<Thread> Finish() {
    auto o = flatbuffers::Offset<Thread>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<Thread> CreateThread(flatbuffers::FlatBufferBuilder &_fbb,
   const xe::debug::proto::XObject *object = 0,
   ThreadType type = ThreadType_Kernel) {
  ThreadBuilder builder_(_fbb);
  builder_.add_object(object);
  builder_.add_type(type);
  return builder_.Finish();
}

struct ListThreadsRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct ListThreadsRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  ListThreadsRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ListThreadsRequestBuilder &operator=(const ListThreadsRequestBuilder &);
  flatbuffers::Offset<ListThreadsRequest> Finish() {
    auto o = flatbuffers::Offset<ListThreadsRequest>(fbb_.EndTable(start_, 0));
    return o;
  }
};

inline flatbuffers::Offset<ListThreadsRequest> CreateListThreadsRequest(flatbuffers::FlatBufferBuilder &_fbb) {
  ListThreadsRequestBuilder builder_(_fbb);
  return builder_.Finish();
}

struct ListThreadsResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct ListThreadsResponseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  ListThreadsResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ListThreadsResponseBuilder &operator=(const ListThreadsResponseBuilder &);
  flatbuffers::Offset<ListThreadsResponse> Finish() {
    auto o = flatbuffers::Offset<ListThreadsResponse>(fbb_.EndTable(start_, 0));
    return o;
  }
};

inline flatbuffers::Offset<ListThreadsResponse> CreateListThreadsResponse(flatbuffers::FlatBufferBuilder &_fbb) {
  ListThreadsResponseBuilder builder_(_fbb);
  return builder_.Finish();
}

}  // namespace proto
}  // namespace debug
}  // namespace xe

#endif  // FLATBUFFERS_GENERATED_THREADS_XE_DEBUG_PROTO_H_
